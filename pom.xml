<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.2</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ur.akka.fsm</groupId>
	<artifactId>spring-akka</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-akka</name>
	<description>Akka with Spring</description>
	<properties>
		<java.version>17</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<akka-diagnostics.version>2.1.0</akka-diagnostics.version>
		<scala.binary.version>2.13</scala.binary.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.typesafe.akka</groupId>
				<artifactId>akka-bom_${scala.binary.version}</artifactId>
				<version>2.9.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<repositories>
		<repository>
			<id>akka-repository</id>
			<name>Akka library repository</name>
			<url>https://repo.akka.io/maven</url>
		</repository>
	</repositories>


	<dependencies>

		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-cassandra_${scala.binary.version}</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-query_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-cluster-tools_${scala.binary.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-serialization-jackson_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-typed_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-testkit_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-cluster-sharding-typed_${scala.binary.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor-typed_2.13</artifactId>
		</dependency>
		<dependency>
			<groupId>com.lightbend.akka</groupId>
			<artifactId>akka-diagnostics_2.13</artifactId>
			<version>${akka-diagnostics.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<configuration>
					<executable>java</executable>
					<arguments>
						<argument>-classpath</argument>
						<classpath />
						<argument>com.ur.akka.fsm.springakka.SpringAkkaApplication</argument>
						<argument>-Dserver.port=${server.port}</argument>
						<argument>-Dakka.remote.artery.canonical.port=${akka.remote.artery.canonical.port}</argument>
						<argument>-Dakka.management.http.port=${akka.management.http.port}</argument>
						<argument>-Dcinnamon.prometheus.http-server.port=${cinnamon.prometheus.http-server.port}</argument>
					</arguments>
				</configuration>
			</plugin>

		</plugins>
	</build>

</project>
