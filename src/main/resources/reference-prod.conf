include classpath("akka-tools-json-serializing")

logger.root = DEBUG
logger.play = DEBUG
logger.application = DEBUG


datastax-java-driver {
  basic.request.timeout = 20 seconds
  profiles.akka-persistence-cassandra-profile.basic.request.consistency = LOCAL_QUORUM
  advanced.connection.init-query-timeout = 20000 milliseconds
  advanced.auth-provider {
    class = PlainTextAuthProvider
  }

//  advanced.ssl-engine-factory {
//    class = DefaultSslEngineFactory
//  }
  advanced.throttler {
    class = ConcurrencyLimitingRequestThrottler
    max-concurrent-requests = 512
    max-queue-size = 100000
  }
  advanced.reconnect-on-init = true
}



pidfile.path = "/dev/null"


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  event-handlers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters-during-shutdown = on
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  extensions = ["akka.management.cluster.bootstrap.ClusterBootstrap"]
  actor.allow-java-serialization = on
  jvm-exit-on-fatal-error = on
  coordinated-shutdown.terminate-actor-system = on
  coordinated-shutdown.exit-jvm = on
  http.server.default-http-port = 9000
  projection.cassandra.offset-store.keyspace = "stfc_orderstate"
  cluster {
    seed-nodes = []
    seed-nodes = [${?SEED_NODES}]
    shutdown-after-unsuccessful-join-seed-nodes = 200s
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    log-info-verbose = on
    failure-detector{
      threshold= 16.0
      min-std-deviation = 400 ms
      heartbeat-interval = 4 s
      acceptable-heartbeat-pause = 9 s
      expected-response-after = 2 s
    }

    sharding {
      least-shard-allocation-strategy.rebalance-absolute-limit = 2
      least-shard-allocation-strategy.rebalance-relative-limit = 0.2
      number-of-shards = 10
      verbose-debug-logging = true
      #      remember-entities-store = eventsourced
      #      remember-entities = on
      journal-plugin-id = "akka.persistence.cassandra.journal"
      snapshot-plugin-id = "akka.persistence.cassandra.snapshot"
      updating-state-timeout = 50s
      #      entity-recovery-strategy = "constant"

      retry-interval = 10 s
      waiting-for-state-timeout = 60s
      #      passivation.strategy = none
      passivation {
        strategy = default-strategy
        default-strategy {
          idle-entity.timeout = 2.minutes
        }
      }
    }
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      port = 2551
      port = ${?PORT}
      bind-hostname = 0.0.0.0
      bind-port = 2551
    }
  }

  management {
    http {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = "0.0.0.0"
      port = 8558
      bind-port = 8558
    }
  }



  actor {
    provider = cluster
    serialization-bindings {
      "com.ur.akka.fsm.springakka.fsm.JsonSerializable" = jackson-json
    }
  }

  persistence {
    cassandra {
      journal {
        keyspace = "stfc_orderstate"
      }
      snapshot {
        keyspace = "stfc_orderstate"
      }
      query.refresh-interval = 2s
      events-by-tag {
        verbose-debug-logging = true
        first-time-bucket = "20220720T00:00"
        # for lower latency
        eventual-consistency-delay = 10s
        flush-interval = 25ms
        pubsub-notification = on
        gc-grace-seconds = 0
        bucket-size = "Minute"
        time-to-live = 7d
      }
    }
    journal {
      plugin = "akka.persistence.cassandra.journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    max-concurrent-recoveries = 30

  }
}

deploymentRegion = ${CLUSTER_ID}